<style>
.reveal h1, .reveal h2, .reveal h3 {
  word-wrap: normal;
  -moz-hyphens: none;
}
  
.ctpa .reveal .state-background {
  background: #f3f1f1;
} 

.small-code pre code {
  font-size: small;
}

.footer {
    color: black;
    background: #E8E8E8;
    position: fixed;
    top: 90%;
    text-align:center;
    width:100%;
}

</style>

How to Analyze Connected Things
========================================================
author: Rajarshi Guha
date: February 9, 2016
autosize: true
transition: none
font-import: http://fonts.googleapis.com/css?family=Roboto
font-import: http://fonts.googleapis.com/css?family=PT_Sans
font-family: 'Roboto'

```{r echo=FALSE, msg=FALSE}
library(RColorBrewer)
library(igraph)
library(dplyr)
library(ggplot2)
```

[@rguha](https://twitter.com/rguha) | [http://blog.rguha.net](http://blog.rguha.net) | [https://github.com/rajarshi](https://github.com/rajarshi)

[https://github.com/rajarshi/ctpa-igraph](https://github.com/rajarshi/ctpa-igraph)

What's this about?
===
type: ctpa

- A little background on graphs
- Input/Output with `igraph`
- Working with networks
- What can you do with this?

Aim is to show that `igraph` lets you easily load or construct networks and flexibly work with them, so that, if needed, you can easily prototype algorithms on graph representations

Relevant packages
===
type: ctpa

_Representation_

`igraph`, `network`, `bipartite`, `graph`, `giRaph`

_Analysis_

`igraph`, `sna`, `egonet`

_Inference_ 

`ergm`, `statnet` and packages that support [graphical models](https://cran.r-project.org/web/views/gR.html)

_Datasets_

[Stanford SNAP](http://snap.stanford.edu/data/#citnets) (large networks) or [Nexus](http://nexus.igraph.org/) (smaller networks)

What is a graph
===
type: ctpa

- A collection of 
  + nodes - any physical or abstract object
  + edges - indicating relationships between nodes
- Nodes and edges can both have properties
  + useful for integrating different data types or overlaying multiple dimensions

***

- Web pages linked by hyperlinks
- [Authors](http://nexus.igraph.org/api/dataset_info?id=21&format=html) & publications
- Ecological
- Social (people, organizations)
- Proteins, genes, [neurons](http://nexus.igraph.org/api/dataset_info?id=14&format=html)
- [Drug-target](http://www.nature.com/nbt/journal/v25/n10/full/nbt1338.html) 

What is a graph?
===
type: ctpa

The original drug target network ([Yildirim et al, 2007](http://www.nature.com/nbt/journal/v25/n10/full/nbt1338.html))

![](nbt1338-F2.gif)


Loading a graph
===
type: ctpa

- Many ways to create a graph object
  + Simple edge list or specialized formats 
  + GraphML, DIMACS, Pajek, [...](http://www.inside-r.org/packages/cran/igraph/docs/UCINET)
  + From [Nexus](http://nexus.igraph.org/), e.g.,  `nexus_get(14)`
- Edge list is a simple way to start

<font size="6">
```{r igraph-load1, echo=TRUE, eval=TRUE}
edges <- read.csv('ex1-edges.csv', header=TRUE, as.is=TRUE)
head(edges)
```
</font>

Loading a graph
===
type: ctpa

- Optionally provide a set of vertex attributes
- First column should correspond to vertex names in the edges `data.frame`
<font size="6">
```{r igraph-load2, echo=TRUE, eval=TRUE}
vertices <- read.csv('ex1-vertices.csv', 
                      header=TRUE, as.is=TRUE)
head(vertices)
```
</font>

Loading a graph
===
type: ctpa

- Finally create a graph object
<font size="6">
```{r igraph-load3, echo=TRUE, eval=TRUE}
g <- graph.data.frame(edges, directed=FALSE, vertices=vertices)
g
```
</font>

Looking at a graph
===
type: ctpa

<font size="6">
```{r igraph-load4, echo=TRUE, eval=TRUE, fig.align='center'}
plot(g, vertex.label=NA, vertex.size=2, 
     layout=layout_with_fr)
```
</font>
***
- Interactive plotting via `tkplot`
- Network visualization [tutorial](https://rpubs.com/kateto/netviz) has good tips
- Heatmaps also work

```{r, echo=FALSE, fig.align='center', fig.height=4}
v <- which(degree(g) >= 4)
sg1 <- induced_subgraph(g,v)
E(sg1)$weight <- rnorm(ecount(sg1))
am <- as.matrix(get.adjacency(sg1, 'both', attr='weight'))
par(mar=c(1,1,3,1))
image(t(am), xlab='', ylab='', xaxt='n', yaxt='n', main='Weighted Adjacency Matrix')
```

Slicing & dicing a graph 
===
type: ctpa

- Accessing vertices and edges and their attributes
<font size="6">
```{r graphops, echo=TRUE, eval=FALSE}
## get vertices
V(g)

## get vertex attribute by name
V(g)$name

## Names of vertex attributes
vertex_attr_names(g)

## get edges
E(g)

## get edge attribute by name
E(g)$score

## get vertex attribute for specific vertex
V(g)$name[20]
```
</font>

Neighbors
===
type: ctpa

- Given a vertex, useful to identify $k$-nearest neighbors
- `neighborhood` gives the vertex index of the $k$-NN's
- `graph.neighborhood` gives a graph of the $k$-NN
- Useful for comparing the localities of different nodes

***
 
<font size="6">
```{r nn}
neighborhood(g, 2, 1)[[1]]

graph.neighborhood(g, 2, 1)
```
</font>
 
 
Neighbors
===
type: ctpa
 
```{r nn2, echo=FALSE, fig.align='center', fig.width=10, fig.height=8}
nn1 <- graph.neighborhood(g, 2, 1)[[1]]
vcol <- rep('beige', vcount(nn1))
vcol[1] <- '#ff9966'
par(mar=rep(0,4)); plot(nn1, margin=0, vertex.color=vcol)
```
 
 
Subgraphs
===
type: ctpa

```{r, echo=FALSE}
E(g)$id <- seq_len(ecount(g))
```
<font size="6">
```{r sg, eval=TRUE, echo=TRUE}
v <- which(degree(g) >= 4)
sg1 <- induced_subgraph(g,v)
```
</font>

```{r sgv, eval=TRUE, echo=FALSE, fig.align='center'}
vcol <- rep('grey', vcount(g))
vcol[v] <- 'red'
vsize <- rep(2, vcount(g))
vsize[v] <- 4
ecol <- rep('grey90', ecount(g))
ecol[ E(sg1)$id ] <- 'blue'
par(mar=rep(0,4))
lo <- layout.fruchterman.reingold(g)
lo.norm <- layout.norm(lo, -1,1, -1,1)
plot(g, layout=lo, vertex.label=NA, 
     edge.color=ecol,
     vertex.size=2, vertex.color='grey90', margin=0, rescale=TRUE)
plot(sg1, layout=lo, add=TRUE, vertex.label=NA, margin=0, 
     edge.color=ecol,
     vertex.color=vcol, vertex.size=vsize, rescale=TRUE)
```
***
- Identify subgraph given a set of nodes and includes all edges between those nodes
- Useful for 
  + extracting specific subsets of nodes and their edges
  + comparing subnetworks 

(Sub)graph isomorphism
===
type: ctpa

- Are graphs $G$ and $H$ the same?
- Does graph $G$ contain a subgraph that is [isomorphic](https://en.wikipedia.org/wiki/Graph_isomorphism) to $H$
- Very common task when working with chemical structures, biological pathways
- NP-complete problem

<font size="6">
```{r sgi, eval=TRUE, echo=TRUE}
graph.isomorphic(g,g)
```
</font>

Connected components
===
type: ctpa

<font size="6">
```{r cc}
rg <- sample_gnp(50, 0.025)

## Get CC's as graphs
cc <- decompose.graph(rg)

## Get component membership
ccm <- components(rg)
```
</font>

```{r, eval=TRUE, echo=FALSE, fig.align='center', fig.height=6}
pal <- brewer.pal(length(unique(ccm$membership)),
                  "Set1")
vcol <- pal[ccm$membership]
vcol[is.na(vcol)] <- pal[9]
plot(rg, layout=layout_with_fr, vertex.size=8, vertex.label=NA, vertex.color=vcol)
```

***
- Many networks have disconnected components
- Either extract these components as graphs (`decompose.graph`) or just identify which nodes belowing with which component (`components`)
- Handy when dealing with "forests", collections of disconnected graphs

Community detection (a.k.a clustering)
===
type: ctpa

- Useful to identify sets of nodes that are more connected to each other than to other nodes in the graph
<font size="6">
```{r, echo=TRUE, eval=FALSE}
g1 <- decompose.graph(g)[[1]]
c1 <- cluster_edge_betweenness(g1)
```
</font>

```{r clus, echo=FALSE, fig.align='center', fig.width=9, fig.height=5}
g1 <- decompose.graph(g)[[1]]
c1 <- cluster_edge_betweenness(g1)
c2 <- cluster_infomap(g1)
c3 <- cluster_label_prop(g1)
c4 <- cluster_leading_eigen(g1)
c5 <- cluster_louvain(g1)
c6 <- cluster_spinglass(g1)
c7 <- cluster_walktrap(g1)
tmp <- do.call(rbind, lapply(list(c1, c2, c3, c4, c5, c6, c7), 
                      function(x) {
  data.frame(Algorithm=gsub(" ", "\n", x$algorithm), 
             NClus=length(unique(x$membership)))
}))
ggplot(tmp, aes(x=Algorithm, y=NClus))+
  geom_bar(fill='beige', stat='identity', colour='black')+
  xlab("")+ylab("Number of Communities")+
  theme(axis.text.x = element_text(angle=45,hjust=1, size=14),
        axis.title = element_text(size=16))
```

Community detection (a.k.a clustering)
===
type: ctpa

```{r, echo=FALSE, fig.align='center', fig.width=12, fig.height=9}
lo <- layout_with_fr(g1)
cplot <- function(cc, pal = brewer.pal(5, 'Set1')) {
  mt <- data.frame(table(c1$membership)) %>% arrange(-Freq)
  vcol <- pal[match(cc$membership, mt$Var1)]
  vcol[is.na(vcol)] <- 'grey90'
  plot(g1, layout=lo, vertex.label=NA, vertex.size=5, vertex.color=vcol, margin=0, 
     main=cc$algorithm)
}
par(mar=c(0,0,2,0), mfrow=c(2,2), cex=1.2)
junk <- sapply(list(c1,c2,c3,c4), cplot)
```

Writing out graphs
===
type: ctpa

- Write out to files or else convert to `data.frame`
- Useful when you need to use other tools (Cytoscape, Gephi, Pajek, etc)
<font size="6">
```{r graphw, echo=TRUE, eval=TRUE}
## Write graph to GML format which Cytoscape can read in
write.graph(g, 'dump.gml', format='gml')

## Convert graph to data.frame
v <- get.data.frame(g, 'vertices')
e <- get.data.frame(g, 'edges')
head(e)
```
</font>

Characterizing a graph
===
type: ctpa

- A [plethora](https://en.wikipedia.org/wiki/Graph_property) of properties (a.k.a., invariants) that characterize different aspects of a graph
  + order, size, diameter, Wiener index, clustering coefficient
  + Degree sequence, graph spectrum
- Properties can be computed for 
  + whole graph (e.g., size)
  + edges or vertices (e.g., degree, centrality, betweenness)
- The choice of invariant is domain & problem dependent  
  + some can be more useful than others - order and size are degenerate, but graph spectrum will be less so
  
Characterizing a graph
===
type: ctpa

<font size="6">
```{r graphprops, echo=FALSE,eval=TRUE, fig.height=9}
rg1 <- sample_gnp(100, 0.05)
rg2 <- sample_gnp(100, 0.05)
ev1 <- eigen(get.adjacency(rg1))$values
ev2 <- eigen(get.adjacency(rg2))$values

nf <- layout(matrix(c(1,2,3,3,4,4), nrow=3, byrow=TRUE))
par(mar=rep(0,4))
plot(rg1, layout=layout_with_fr, vertex.label=NA, vertex.size=2, margin=0)
plot(rg2, layout=layout_with_fr, vertex.label=NA, vertex.size=2, margin=0)

par(mar=c(3,3,3,1))
c1 <- centralization.betweenness(rg1)$res
c2 <- centralization.betweenness(rg2)$res
plot(density(c1), col='red', main='Vertex Centralization Distributions', cex.main=2)
lines(density(c2), col='blue')

par(mar=c(3,3,2,2))
barplot(ev1-ev2, main=expression(paste(Delta, " graph spectrum")), cex.main=2)
```
</font>

*** 

- Two random graphs with same node count, similar edge counts (`r length(E(rg1))` & `r length(E(rg2))`)
- [Vertex centralization](https://en.wikipedia.org/wiki/Centrality) very similar (K-S test p = `r round(ks.test(c1,c2)$p,2)`)
- But graph spectrum shows distinct difference
<font size="5">
```{r, echo=TRUE}
rg1 <- sample_gnp(100, 0.05)
rg2 <- sample_gnp(100, 0.05)

ev1 <- eigen(graph.laplacian(rg1, 
             norm=TRUE))$values
ev2 <- eigen(graph.laplacian(rg2, 
             norm=TRUE))$values

dev <- ev1-ev2
```
</font>

Characterizing branching
===
type: ctpa

<font size="6">
```{r id, eval=FALSE, echo=TRUE, fig.align='center', cache=TRUE}
Id  <- function(g) {
  dm <- shortest.paths(g)
  dm <- table(
    dm[upper.tri(dm)]
  )
  sk <- sum(dm * log2(dm))
  n <- length(V(g))  
  n * (n-1)/2 * 
    log2( n*(n-1)/2 ) - sk
}
```
</font>

```{r, echo=FALSE, cache=TRUE, fig.align='center', fig.height=5}
load('Id-example.Rda')
Id  <- function(g) {
  dm <- shortest.paths(g)
  dm <- table(
    dm[upper.tri(dm)]
  )
  sk <- sum(dm * log2(dm))
  n <- length(V(g))  
  n * (n-1)/2 * 
    log2( n*(n-1)/2 ) - sk
}
cp <- function(g, ...) plot(g, layout=layout_with_fr, 
                            vertex.label=NA, vertex.size=2, 
                            edge.arrow.size=0, margin=0,
                            ...)
par(mar=c(0,0,3,0), mfrow=c(2,2), cex=1.2)
junk <- sapply(matches, function(x) cp(x, main=substitute(
  paste(I[D], " = ", i), list(i=round(Id(x),2)))))
```
***

- The $I_D$ measure ([Bonchev & Trinajistic, 1978](http://onlinelibrary.wiley.com/doi/10.1002/qua.560140823/abstract)) is designed to characterize branching
- But centralization could be useful as well

```{r, echo=FALSE, fig.align='center', fig.height=5}
tmp <- data.frame(Id=sapply(matches, Id),
                  Cb=sapply(matches, function(x) centralization.betweenness(x)$centralization),
                  Cd=sapply(matches, function(x) centralization.degree(x)$centralization),
                  Cc=sapply(matches, function(x) centralization.closeness(x)$centralization),
                  Cev=sapply(matches, function(x) centralization.evcent(x)$centralization)
                  )
tmp <- melt(tmp, id.var='Id')
ggplot(tmp, aes(x=Id, y=value, group=variable, colour=variable, fill=variable))+
  geom_point(pch=21, size=4, colour='black')+
  geom_line()+scale_x_log10()+scale_y_log10()+
  ylab(expression(paste(log[10], " Centralization")))+
  xlab(expression(paste(log[10], " ", I[D])))+
  scale_fill_discrete()+scale_colour_discrete(guide=FALSE)+
  theme(legend.position=c(0.1, 0.2),
        legend.title = element_blank(),
        axis.title = element_text(size=16),
        axis.text = element_text(size=14))
```

Degrees of separation
===
type: ctpa

Facebook recently reported that we are actually separated from each other by [3.5 degrees](https://research.facebook.com/blog/three-and-a-half-degrees-of-separation/) and not 6
![](fb.png)

Degrees of separation
===
type: ctpa


- For each node, compute length of shortest path to every other nodes, and then average over all nodes

<font size="6">
```{r dsep, echo=TRUE, eval=TRUE}
spl <- shortest.paths(g)
spl <- spl[upper.tri(spl)]
spl <- spl[spl != Inf]
mean(spl)

## Or be lazy ...
average.path.length(g, directed=FALSE)
```
</font>

Degrees of separation 
===
type: ctpa

- How does it differ from random networks with the same number of nodes and edges?
<font size="6">
```{r dsep-random, echo=TRUE, eval=TRUE}
mean(unlist(mclapply(1:500, function(i) {
  rg <- sample_gnm(n=vcount(g), m=ecount(g)) # Erdos-Renyi
  average.path.length(rg, directed=FALSE)
  }, mc.cores=4)))

mean(unlist(mclapply(1:500, function(i) {
  rg <- sample_pa(vcount(g)) # Barabasi-Albert
  average.path.length(rg, directed=FALSE) 
  }, mc.cores=4)))

```
</font>

Degrees of separation  - Caveat  
===
type: ctpa

- Straightforward on current laptops for small (V < 1000)
- Doesn't scale when you're dealing with hundreds of thousands or more nodes.
- Consider sampling or statistical methods to estimate average path lengths

*** 

![](allpairstime.png)

Degrees of separation  - Sampling
===
type: ctpa

<font size="6">
```{r dsep-sample, echo=TRUE, eval=TRUE, cache=TRUE}
ns <- 1e4
rg <- sample_gnp(ns, 0.015)
system.time(ds1 <- average.path.length(rg))

system.time(ds2 <- mean(sapply(1:2000, function(x) {
  idxs <- sample(1:length(V(rg)), 2)
  length(get.shortest.paths(rg, idxs[1], idxs[2])$vpath[[1]])-1
})))

abs(ds1-ds2)
```
</font>  


Which drug pairs are most effective?
===
type: ctpa

```{r mst, echo=FALSE, fig.align='center'}
load('malaria.Rda')
mst <- minimum.spanning.tree(g1, algorithm='prim')
lo <- layout_with_gem(mst)
lo.norm <- layout.norm(lo, -1,1, -1,1)
par(mar=c(0,0,0,0))
plot(g1, layout=lo.norm, vertex.label=NA,
     vertex.size=1,
     rescale=FALSE, edge.color="gray89")
plot(mst, layout=lo.norm,
     vertex.label=NA,      
     vertex.size=sapply(V(mst)$potclass, function(x) vsize[[x]]),
     vertex.color=sapply(V(mst)$moa, function(x) vcol[[x]]),
     edge.color="gray8",
     edge.width=2,
     add=TRUE, rescale=FALSE)
```
<font size="6">
```{r, echo=TRUE, eval=FALSE}
minimum.spanning.tree(g1, 
       algorithm='prim')
```
</font>

*** 

- Each node is a drug, each edge is a drug combination
- Edge weight indicates effectiveness of the combination
- What is the most effective set of combinations?
- The [minimum spanning tree](https://en.wikipedia.org/wiki/Minimum_spanning_tree) identifies the **tree** using all vertices that has the minimum edge weight


Dynamic networks
===
type: ctpa

- Many real networks are not static
  + spread of diseases (flu, Ebola, Zika)
  + flow of rumors or ideas in communities
  + growth of and exchange between scientific subfields

- `sir` method implements the [Susceptible-Infected-Recovered](https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SIR_model) model

Spatial networks
===
type: ctpa

- Tweet network has geographic coordinates for some people
- How does geographic distance correlate with topological distance?

```{r, echo=FALSE, fig.align='center', fig.height=5}
vidx <- which(!is.na(V(g)$geox))
g2 <- induced_subgraph(g, vidx)
gd <- cbind(V(g2)$geox, V(g2)$geoy)
dat <- data.frame(Topological=as.numeric(shortest.paths(g2)),
                  Euclidean=as.numeric(as.matrix(dist(gd))))
ggplot(dat, aes(Topological, Euclidean))+
  geom_point(pch=21, alpha=0.75, fill='red')+
  theme(axis.title = element_text(size=16),
        axis.text = element_text(size=14))
```

*** 
<font size="5">
```{r, eval=FALSE}
vidx <- which(!is.na(V(g)$geox))
g2 <- induced_subgraph(g, vidx)

tm <- as.numeric(shortest.paths(g2))
em <- as.numeric(as.matrix(
  dist(cbind(V(g2)$geox,V(g2)$geoy))))
dat <- data.frame(Topo=tm, Euc=em)

ggplot(dat, aes(Topo, Euc))+
  geom_point(pch=21, 
             alpha=0.75, 
             fill='red')+
  theme(axis.title = 
          element_text(size=16),
        axis.text = 
          element_text(size=14))
```
</font>

```{r}

```
